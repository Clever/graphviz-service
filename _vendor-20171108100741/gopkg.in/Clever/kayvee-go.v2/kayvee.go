package kayvee

import (
	"encoding/json"
	"log"
	"os"

	"github.com/getsentry/raven-go"
)

// Log Levels:

// LogLevel denotes the level of a logging
type LogLevel string

// Constants used to define different LogLevels supported
const (
	Unknown  LogLevel = "unknown"
	Critical          = "critical"
	Error             = "error"
	Warning           = "warning"
	Info              = "info"
	Trace             = "trace"
)

// Internal defaults used by Logger.
const (
	defaultFlags = log.LstdFlags | log.Lshortfile
)

// Format converts a map to a string of space-delimited key=val pairs
func Format(data map[string]interface{}) string {
	formattedString, _ := json.Marshal(data)
	return string(formattedString)
}

// FormatLog is similar to Format, but takes additional reserved params to promote logging best-practices
func FormatLog(source string, level LogLevel, title string, data map[string]interface{}) string {
	if data == nil {
		data = make(map[string]interface{})
	}
	data["source"] = source
	data["level"] = level
	data["title"] = title
	return Format(data)
}

// SentryClient interface allows mocking for testing
type sentryClient interface {
	Capture(packet *raven.Packet, captureTags map[string]string) (eventID string, ch chan error)
}

// Logger is an interface satisfied by all loggers that use kayvee to Log results
type Logger interface {
	Info(title string, data map[string]interface{})
	Warning(title string, data map[string]interface{})
	Error(title string, data map[string]interface{}, err error)
}

// SentryLogger provides an wrapper methods to do logging using kayvee and optionally sending errors
// to kayvee.
type SentryLogger struct {
	source       string
	logger       *log.Logger
	sentryClient sentryClient
}

// NewSentryLogger returns a new *kayvee.Logger.
// source is the value assigned for all logs generated by the logger
// log.Logger is the underlying logger used. If nil, uses log.New(os.Stderr, "", log.Ldate|log.Ltime|log.Lshortfile)
// sentryClient is used to optionally route errors to sentry.
func NewSentryLogger(source string, logger *log.Logger, sentryClient *raven.Client) *SentryLogger {
	if logger == nil {
		logger = log.New(os.Stderr, "", defaultFlags)
	}
	return &SentryLogger{source: source, logger: logger, sentryClient: sentryClient}
}

// Info writes a log with level kayvee.Info
func (l *SentryLogger) Info(title string, data map[string]interface{}) {
	l.logger.Output(2, FormatLog(l.source, Info, title, data))
}

// Warning writes a log with level kayvee.Warning
func (l *SentryLogger) Warning(title string, data map[string]interface{}) {
	l.logger.Output(2, FormatLog(l.source, Warning, title, data))
}

func (l *SentryLogger) sentryCapture(err error) string {
	sentryID := ""
	if l.sentryClient != nil && err != nil {
		packet := raven.NewPacket(err.Error(), raven.NewException(err, raven.NewStacktrace(2, 3, nil)))
		sentryID, _ = l.sentryClient.Capture(packet, map[string]string{})
	}
	return sentryID
}

// Error writes a log with level kayvee.Error
// If the logger was initialized with a sentryClient and error is not nil, captures the error for
// sentry and assigns the event ID to the `sentry_event_id` key in the data.
func (l *SentryLogger) Error(title string, data map[string]interface{}, err error) {
	sentryID := l.sentryCapture(err)
	if sentryID != "" {
		data["sentry_event_id"] = sentryID
	}

	l.logger.Output(2, FormatLog(l.source, Error, title, data))
}
